{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst usePagination = initialState => {\n  _s();\n  const {\n    itemsPerPage,\n    data,\n    startFrom\n  } = initialState;\n  const [searching, setSearching] = useState(false);\n  const [filteredData, setFilteredData] = useState(data);\n  const perPage = itemsPerPage ? itemsPerPage : 12;\n  const pages = Math.ceil(filteredData.length / perPage);\n  const pagination = [];\n  const [currentPage, setCurrentPage] = useState(startFrom <= pages ? startFrom : 1);\n  const [slicedData, setSlicedData] = useState([...filteredData].slice((currentPage - 1) * perPage, currentPage * perPage));\n  useEffect(() => {\n    setSlicedData([...filteredData].slice((currentPage - 1) * perPage, currentPage * perPage));\n    if (searching) {\n      setCurrentPage(1);\n      setSearching(false);\n    }\n  }, [filteredData, currentPage]);\n  let ellipsisLeft = false;\n  let ellipsisRight = false;\n  for (let i = 1; i <= pages; i++) {\n    if (i === currentPage) {\n      pagination.push({\n        id: i,\n        current: true,\n        ellipsis: false\n      });\n    } else {\n      if (i < 2 || i > pages - 1 || i === currentPage - 1 || i === currentPage + 1) {\n        pagination.push({\n          id: i,\n          current: false,\n          ellipsis: false\n        });\n      } else if (i > 1 && i < currentPage && !ellipsisLeft) {\n        pagination.push({\n          id: i,\n          current: false,\n          ellipsis: true\n        });\n        ellipsisLeft = true;\n      } else if (i < pages && i > currentPage && !ellipsisRight) {\n        pagination.push({\n          id: i,\n          current: false,\n          ellipsis: true\n        });\n        ellipsisRight = true;\n      }\n    }\n  }\n  const changePage = (page, event) => {\n    event.preventDefault();\n    if (page !== currentPage) {\n      setCurrentPage(page);\n      setSlicedData([...filteredData].slice((page - 1) * perPage, page * perPage));\n    }\n  };\n  const goToPrevPage = event => {\n    event.preventDefault();\n    setCurrentPage(prevVal => prevVal - 1 === 0 ? prevVal : prevVal - 1);\n    if (currentPage !== 1) {\n      setSlicedData([...filteredData].slice((currentPage - 2) * perPage, (currentPage - 1) * perPage));\n    }\n  };\n  const goToNextPage = event => {\n    event.preventDefault();\n    setCurrentPage(prevVal => prevVal === pages ? prevVal : prevVal + 1);\n    if (currentPage !== pages) {\n      setSlicedData([...filteredData].slice(currentPage * perPage, (currentPage + 1) * perPage));\n    }\n  };\n  return {\n    slicedData,\n    pagination,\n    prevPage: goToPrevPage,\n    nextPage: goToNextPage,\n    changePage,\n    setFilteredData,\n    setSearching\n  };\n};\n_s(usePagination, \"GVmjfSejBIH3gZ7MevOI8dMP/yA=\");\nexport default usePagination;","map":{"version":3,"names":["useState","useEffect","usePagination","initialState","_s","itemsPerPage","data","startFrom","searching","setSearching","filteredData","setFilteredData","perPage","pages","Math","ceil","length","pagination","currentPage","setCurrentPage","slicedData","setSlicedData","slice","ellipsisLeft","ellipsisRight","i","push","id","current","ellipsis","changePage","page","event","preventDefault","goToPrevPage","prevVal","goToNextPage","prevPage","nextPage"],"sources":["C:/Users/EMRE CAN/frontend/src/components/Pagination/usePagination.js"],"sourcesContent":["import {useState, useEffect} from 'react';\r\n\r\nconst usePagination = (initialState) => {\r\n    const {itemsPerPage, data, startFrom} = initialState;\r\n    const [searching, setSearching] = useState(false);\r\n    const [filteredData, setFilteredData] = useState(data);\r\n    const perPage = itemsPerPage ? itemsPerPage : 12;\r\n    const pages = Math.ceil(filteredData.length / perPage);\r\n    const pagination = [];\r\n    const [currentPage, setCurrentPage] = useState(startFrom <= pages ? startFrom : 1);\r\n    const [slicedData, setSlicedData] = useState([...filteredData].slice((currentPage - 1) * perPage, currentPage * perPage));\r\n\r\n    useEffect(() => {\r\n        setSlicedData([...filteredData].slice((currentPage - 1) * perPage, currentPage * perPage));\r\n\r\n        if (searching) {\r\n            setCurrentPage(1);\r\n            setSearching(false);\r\n        }\r\n    }, [filteredData, currentPage]);\r\n\r\n    let ellipsisLeft = false;\r\n    let ellipsisRight = false;\r\n\r\n    for (let i = 1; i <= pages; i++) {\r\n        if (i === currentPage) {\r\n            pagination.push(\r\n                {id: i, current: true, ellipsis: false}\r\n            );\r\n        } else {\r\n            if (i < 2 || i > pages - 1 || i === currentPage - 1 || i === currentPage + 1) {\r\n                pagination.push(\r\n                    {id: i, current: false, ellipsis: false}\r\n                );\r\n            } else if (i > 1 && i < currentPage && !ellipsisLeft) {\r\n                pagination.push(\r\n                    {id: i, current: false, ellipsis: true}\r\n                );\r\n                ellipsisLeft = true;\r\n            } else if (i < pages && i > currentPage && !ellipsisRight) {\r\n                pagination.push(\r\n                    {id: i, current: false, ellipsis: true}\r\n                );\r\n                ellipsisRight = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    const changePage = (page, event) => {\r\n        event.preventDefault();\r\n\r\n        if (page !== currentPage) {\r\n            setCurrentPage(page);\r\n            setSlicedData([...filteredData].slice((page - 1) * perPage, page * perPage));\r\n        }\r\n    }\r\n\r\n    const goToPrevPage = (event) => {\r\n        event.preventDefault();\r\n\r\n        setCurrentPage(prevVal => prevVal - 1 === 0 ? prevVal : prevVal - 1);\r\n\r\n        if (currentPage !== 1) {\r\n            setSlicedData([...filteredData].slice((currentPage - 2) * perPage, (currentPage - 1) * perPage));\r\n        }\r\n    }\r\n\r\n    const goToNextPage = (event) => {\r\n        event.preventDefault();\r\n\r\n        setCurrentPage(prevVal => prevVal === pages ? prevVal : prevVal + 1);\r\n\r\n        if (currentPage !== pages) {\r\n            setSlicedData([...filteredData].slice(currentPage * perPage, (currentPage + 1) * perPage));\r\n        }\r\n    }\r\n\r\n    return {\r\n        slicedData,\r\n        pagination,\r\n        prevPage: goToPrevPage,\r\n        nextPage: goToNextPage,\r\n        changePage,\r\n        setFilteredData,\r\n        setSearching\r\n    }\r\n}\r\n\r\nexport default usePagination;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}