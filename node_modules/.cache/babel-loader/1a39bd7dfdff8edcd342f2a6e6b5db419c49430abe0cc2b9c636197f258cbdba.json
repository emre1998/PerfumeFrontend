{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_ORDER_SUCCESS, ORDER_ADDED_SUCCESS, ORDER_ADDED_FAILURE, ORDER_CONFIRMED_SUCCESS, FETCH_USER_ORDERS_SUCCESS } from \"../utils/constants/actions-types\";\nimport { API_BASE_URL } from \"../utils/constants/url\";\nexport const fetchOrder = () => async dispatch => {\n  const response = await axios({\n    method: \"GET\",\n    url: API_BASE_URL + \"/order\",\n    Headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": localStorage.getItem(\"token\")\n    }\n  });\n  dispatch({\n    type: FETCH_ORDER_SUCCESS,\n    payload: response.data\n  });\n};\nexport const addOrder = (order, history) => async dispatch => {\n  try {\n    const response = await axios({\n      method: \"POST\",\n      url: API_BASE_URL + \"/order\",\n      data: order,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": localStorage.getItem(\"token\")\n      }\n    });\n    history.push(\"/order/finalize\");\n    dispatch({\n      type: ORDER_ADDED_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_ADDED_FAILURE,\n      payload: error.response.data\n    });\n  }\n};\nexport const fetchUserOrders = () => async dispatch => {\n  const resonse = await axios({\n    method: \"GET\",\n    url: API_BASE_URL + \"/user/orders\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": localStorage.getItem(\"token\")\n    }\n  });\n  dispatch({\n    type: FETCH_USER_ORDERS_SUCCESS,\n    payload: resonse.data\n  });\n};\nexport const finalizeOrder = () => async dispatch => {\n  const response = await axios.get(API_BASE_URL + \"/order/finalize\");\n  dispatch({\n    type: ORDER_CONFIRMED_SUCCESS,\n    payload: response.data\n  });\n};","map":{"version":3,"names":["axios","FETCH_ORDER_SUCCESS","ORDER_ADDED_SUCCESS","ORDER_ADDED_FAILURE","ORDER_CONFIRMED_SUCCESS","FETCH_USER_ORDERS_SUCCESS","API_BASE_URL","fetchOrder","dispatch","response","method","url","Headers","localStorage","getItem","type","payload","data","addOrder","order","history","headers","push","error","fetchUserOrders","resonse","finalizeOrder","get"],"sources":["C:/Users/EMRE CAN/frontend/src/actions/order-actions.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nimport {\r\n    FETCH_ORDER_SUCCESS,\r\n    ORDER_ADDED_SUCCESS,\r\n    ORDER_ADDED_FAILURE,\r\n    ORDER_CONFIRMED_SUCCESS,\r\n    FETCH_USER_ORDERS_SUCCESS\r\n} from \"../utils/constants/actions-types\";\r\nimport {API_BASE_URL} from \"../utils/constants/url\";\r\n\r\n\r\nexport const fetchOrder = () => async (dispatch) => {\r\n    const response = await axios ({\r\n        method:\"GET\",\r\n        url:API_BASE_URL +\"/order\",\r\n        Headers: {\r\n            \"Content-Type\":\"application/json\",\r\n            \"Authorization\":localStorage.getItem(\"token\")\r\n        }\r\n    });\r\n\r\n    dispatch({\r\n        type:FETCH_ORDER_SUCCESS,\r\n        payload:response.data\r\n    })\r\n};\r\n\r\nexport const addOrder = (order,history) => async (dispatch) => {\r\n    try {\r\n        const response = await axios({\r\n            method:\"POST\",\r\n            url:API_BASE_URL + \"/order\",\r\n            data:order,\r\n            headers: {\r\n                \"Content-Type\" :\"application/json\",\r\n                \"Authorization\":localStorage.getItem(\"token\")\r\n            }\r\n        });\r\n        history.push(\"/order/finalize\");\r\n\r\n        dispatch({\r\n            type:ORDER_ADDED_SUCCESS,\r\n            payload:response.data\r\n        })\r\n    }catch(error) {\r\n        dispatch({\r\n            type:ORDER_ADDED_FAILURE,\r\n            payload:error.response.data\r\n        })\r\n    }\r\n};\r\n\r\nexport const fetchUserOrders = () => async (dispatch) => {\r\n    const resonse = await axios({\r\n        method:\"GET\",\r\n        url:API_BASE_URL + \"/user/orders\",\r\n        headers: {\r\n            \"Content-Type\":\"application/json\",\r\n            \"Authorization\":localStorage.getItem(\"token\")\r\n        }\r\n    });\r\n    dispatch({\r\n        type:FETCH_USER_ORDERS_SUCCESS,\r\n        payload:resonse.data\r\n    })\r\n};\r\n\r\nexport const finalizeOrder = () => async (dispatch) => {\r\n    const response = await axios.get(API_BASE_URL +\"/order/finalize\");\r\n\r\n    dispatch({\r\n        type:ORDER_CONFIRMED_SUCCESS,\r\n        payload:response.data\r\n    })\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SACIC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,uBAAuB,EACvBC,yBAAyB,QACtB,kCAAkC;AACzC,SAAQC,YAAY,QAAO,wBAAwB;AAGnD,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EAChD,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAAE;IAC1BU,MAAM,EAAC,KAAK;IACZC,GAAG,EAACL,YAAY,GAAE,QAAQ;IAC1BM,OAAO,EAAE;MACL,cAAc,EAAC,kBAAkB;MACjC,eAAe,EAACC,YAAY,CAACC,OAAO,CAAC,OAAO;IAChD;EACJ,CAAC,CAAC;EAEFN,QAAQ,CAAC;IACLO,IAAI,EAACd,mBAAmB;IACxBe,OAAO,EAACP,QAAQ,CAACQ;EACrB,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAACC,OAAO,KAAK,MAAOZ,QAAQ,IAAK;EAC3D,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAAC;MACzBU,MAAM,EAAC,MAAM;MACbC,GAAG,EAACL,YAAY,GAAG,QAAQ;MAC3BW,IAAI,EAACE,KAAK;MACVE,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAACR,YAAY,CAACC,OAAO,CAAC,OAAO;MAChD;IACJ,CAAC,CAAC;IACFM,OAAO,CAACE,IAAI,CAAC,iBAAiB,CAAC;IAE/Bd,QAAQ,CAAC;MACLO,IAAI,EAACb,mBAAmB;MACxBc,OAAO,EAACP,QAAQ,CAACQ;IACrB,CAAC,CAAC;EACN,CAAC,QAAMM,KAAK,EAAE;IACVf,QAAQ,CAAC;MACLO,IAAI,EAACZ,mBAAmB;MACxBa,OAAO,EAACO,KAAK,CAACd,QAAQ,CAACQ;IAC3B,CAAC,CAAC;EACN;AACJ,CAAC;AAED,OAAO,MAAMO,eAAe,GAAGA,CAAA,KAAM,MAAOhB,QAAQ,IAAK;EACrD,MAAMiB,OAAO,GAAG,MAAMzB,KAAK,CAAC;IACxBU,MAAM,EAAC,KAAK;IACZC,GAAG,EAACL,YAAY,GAAG,cAAc;IACjCe,OAAO,EAAE;MACL,cAAc,EAAC,kBAAkB;MACjC,eAAe,EAACR,YAAY,CAACC,OAAO,CAAC,OAAO;IAChD;EACJ,CAAC,CAAC;EACFN,QAAQ,CAAC;IACLO,IAAI,EAACV,yBAAyB;IAC9BW,OAAO,EAACS,OAAO,CAACR;EACpB,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMS,aAAa,GAAGA,CAAA,KAAM,MAAOlB,QAAQ,IAAK;EACnD,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAAC2B,GAAG,CAACrB,YAAY,GAAE,iBAAiB,CAAC;EAEjEE,QAAQ,CAAC;IACLO,IAAI,EAACX,uBAAuB;IAC5BY,OAAO,EAACP,QAAQ,CAACQ;EACrB,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}